name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# allow Codecov to post statuses/comments
permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      GITHUB_ACTIONS: "true"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install black pdfplumber python-docx PyYAML pandas pytest pytest-cov coverage pre-commit detect-secrets

      - name: Run pre-commit (format, hygiene, secrets)
        run: pre-commit run --all-files

      - name: Code style (Black check)
        run: black --check .

      - name: Run tests with coverage (src layout)
        env:
          PYTHONPATH: src
        run: |
          rm -f .coverage coverage.xml || true
          python -m pytest -q -m "not ai" \
            --cov=src \
            --cov-report=term-missing:skip-covered \
            --cov-report=xml:coverage.xml
          test -s coverage.xml
          ls -l coverage.xml

      # Only run token checks & upload when secrets are available (i.e., not from forked PRs)
      - name: Sanity check CODECOV_TOKEN is available
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          if [ -z "${CODECOV_TOKEN}" ]; then
            echo "ERROR: CODECOV_TOKEN is not available to this workflow (fork PRs cannot access secrets)."
            exit 1
          else
            echo "Codecov token is present (value is masked)."
          fi

      - name: Upload coverage to Codecov
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: compliance-classifier
          token: ${{ secrets.CODECOV_TOKEN }} # required for protected branches
          slug: vectorworx/compliance-classifier-prototype # be explicit
          commit_sha: ${{ github.sha }} # be explicit
          branch: ${{ github.head_ref || github.ref_name }} # be explicit
          fail_ci_if_error: true
          verbose: true

  demo:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      GITHUB_ACTIONS: "true"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install runtime deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pdfplumber python-docx PyYAML pandas streamlit

      - name: Run demo (GDPR + SOC2)
        run: python demo.py

      - name: Upload findings (CSV/JSON)
        uses: actions/upload-artifact@v4
        with:
          name: findings-${{ github.run_id }}
          path: |
            data/outputs/*.csv
            data/outputs/*.json
          if-no-files-found: ignore

      - name: Upload audit DB (SQLite)
        uses: actions/upload-artifact@v4
        with:
          name: audit-db-${{ github.run_id }}
          path: data/cc_audit.sqlite
          if-no-files-found: ignore
