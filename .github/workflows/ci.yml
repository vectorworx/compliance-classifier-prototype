name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      GITHUB_ACTIONS: "true"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install black pdfplumber python-docx PyYAML pandas pytest pytest-cov coverage pre-commit detect-secrets

      - name: Run pre-commit (format, hygiene, secrets)
        run: pre-commit run --all-files

      - name: Code style (Black check)
        run: black --check .

      - name: Run tests with coverage (rules-only path)
        # Using explicit flags so it works even without pyproject config
        run: |
          python -m pytest -q -m "not ai" --cov=./ --cov-report=term-missing --cov-report=xml:coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: unittests
          verbose: true
        env:
          # For public repos + GitHub App install, no CODECOV_TOKEN needed.
          # If you ever need a token (private repo), add CODECOV_TOKEN in GitHub Secrets.
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  demo:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      GITHUB_ACTIONS: "true"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install runtime deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pdfplumber python-docx PyYAML pandas streamlit

      - name: Run demo (GDPR + SOC2)
        run: python demo.py

      - name: Upload findings (CSV/JSON)
        uses: actions/upload-artifact@v4
        with:
          name: findings-${{ github.run_id }}
          path: |
            data/outputs/*.csv
            data/outputs/*.json
          if-no-files-found: ignore

      - name: Upload audit DB (SQLite)
        uses: actions/upload-artifact@v4
        with:
          name: audit-db-${{ github.run_id }}
          path: data/cc_audit.sqlite
          if-no-files-found: ignore
